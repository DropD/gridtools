/**
 * This code was automatically generated by gridtools4py:
 * the Python interface to the Gridtools library
 *
 */
#pragma once

#include <gridtools.h>
#include <common/defs.h>
#include <stencil-composition/backend_host.h>

#include <boost/fusion/include/make_vector.hpp>



#ifdef BACKEND_BLOCK
#define BACKEND backend<Host, Block >
#else
#define BACKEND backend<Host, Naive >
#endif



using gridtools::level;
using gridtools::arg_type;
using gridtools::range;
using gridtools::arg;

using namespace gridtools;
using namespace enumtype;


namespace {{ stencil.name|lower }}
{
//
// definition of the special regions in the vertical (k) direction
//
typedef gridtools::interval<level<0,-1>, level<1,-1> > x_interval;
typedef gridtools::interval<level<0,-2>, level<1,1> > axis;

//
// functor definition - begin
//
{{ functor_source }}
//
// functor definition - end
//



bool test (uint_t d1, uint_t d2, uint_t d3,
           {%- for arg in functor_params -%}
           void *{{ arg.name }}_buff
               {%- if not loop.last -%}
               ,
               {%- endif -%}
           {%- endfor -%})
{
    //
    // Fortran-like memory layout
    //
    //typedef gridtools::layout_map<2,1,0> layout_t;
    
    //
    // C-like memory layout
    //
    typedef gridtools::layout_map<0,1,2> layout_t;

    typedef gridtools::BACKEND::storage_type<double, layout_t >::type storage_type;

    {## 
     ## Declaration of the temporary-data-field type
     ##}
    {% if temp_params %}
    typedef gridtools::BACKEND::temporary_storage_type<double, layout_t >::type tmp_storage_type;
    {% endif %}


    {## 
     ## Declaration of input data fields
     ##}
    {% for arg in functor_params if arg.input -%}
        {% if loop.first %}
    //
    // input data fields share their buffers with NumPy arrays
    //  
        {% endif -%}
    storage_type {{ arg.name }} ({{ arg.dim|join_with_prefix('(uint_t) ')|join(',') }},
                                 (double *) {{ arg.name }}_buff,
                                 std::string ("{{ arg.name }}"));
    {% endfor %}


    {## 
     ## Declaration of output data fields
     ##}
    {% for arg in functor_params if arg.output -%}
        {% if loop.first %}
    //
    // output data fields also share their buffers with NumPy arrays
    //  
        {% endif -%}
    storage_type {{ arg.name }} ({{ arg.dim|join_with_prefix('(uint_t) ')|join(',') }},
                                 (double *) {{ arg.name }}_buff,
                                 std::string ("{{ arg.name }}"));
    {% endfor %}

    // 
    // place-holder definition: their order reflect matches the stencil
    // parameters, especially the non-temporary ones, during the construction
    // of the domain
    //
    {% for arg in functor_params -%}
    typedef arg<{{ arg.id }}, storage_type> p_{{ arg.name }};
    {% endfor %}
    {% for arg in temp_params -%}
    typedef arg<{{ arg.id }}, tmp_storage_type> p_{{ arg.name }};
    {% endfor %}


    // An array of placeholders to be passed to the domain
    // I'm using mpl::vector, but the final API should look slightly simpler
    typedef boost::mpl::vector<
        {{- all_params|sort(attribute='id')|join_with_prefix ('p_', attribute='name')|join (', ') }}> arg_type_list; 

    //
    // construction of the domain.
    // The domain is the physical domain of the problem, with all the physical
    // fields that are used, temporary and not.
    // It must be noted that the only fields to be passed to the constructor 
    // are the non-temporary. The order in which they have to be passed is the
    // order in which they appear scanning the placeholders in order. 
    // (I don't particularly like this)
    //
    gridtools::domain_type<arg_type_list> domain (boost::fusion::make_vector (
        {{- functor_params|sort(attribute='id')|join_with_prefix('&', attribute='name')|join(', ') }}));

    //
    // definition of the physical dimensions of the problem.
    // The constructor takes the horizontal plane dimensions,
    // while the vertical ones are set according the the axis 
    // property soon after this:
    //
    //      gridtools::coordinates<axis> coords(2,d1-2,2,d2-2);
    //
    uint_t di[5] = {1, 1, 1, d1-1, d1-1};
    uint_t dj[5] = {1, 1, 1, d2-1, d2-1};

    gridtools::coordinates<axis> coords(di, dj);
    coords.value_list[0] = 0;
    coords.value_list[1] = d3-1;

    //
    // Here we do a lot of stuff
    //
    // 1) we pass to the intermediate representation ::run function the 
    // description of the stencil, which is a multi-stage stencil (mss);
    // 2) the logical physical domain with the fields to use;
    // 3) the actual domain dimensions
    //
    boost::shared_ptr<gridtools::computation> comp_{{ stencil.name|lower }} =
      gridtools::make_computation<gridtools::BACKEND, layout_t>
        (
            gridtools::make_mss
            (
                execute<forward>(),
                {% for f in functors -%}
                gridtools::make_esf<{{ f.name }}>(
                   {{- all_params|sort(attribute='id')|join_with_prefix ('p_', attribute='name')|join ('(), ') }}())
                    {%- if not loop.last -%}
                    ,
                    {%- endif %}
                {% endfor -%}
                ),
            domain, coords
            );

    comp_{{ stencil.name|lower }}->ready();
    comp_{{ stencil.name|lower }}->steady();
    
    domain.clone_to_gpu ( );

    comp_{{ stencil.name|lower }}->run();
    comp_{{ stencil.name|lower }}->finalize();

    return EXIT_SUCCESS;
}

} // namespace {{ stencil.name|lower }}

